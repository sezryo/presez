#! /usr/bin/env cached-nix-shell
#! nix-shell -i runghc -p ripgrep "haskellPackages.ghcWithPackages (p: [p.turtle])"

{-# LANGUAGE OverloadedStrings #-}

import Turtle
import System.Environment
import Prelude hiding (FilePath)

data Command = NewPackage FilePath | Rebuild (Maybe Bool, Maybe Bool) | GarbageCollect (Maybe Bool) | Check (Maybe Bool) | Search SearchSource | Init (Maybe Bool) | Hop (Maybe Text) | Profile ProfileOptions | Repl (Maybe Bool, Maybe Bool) deriving (Show)

data SearchSource = Package Text | SystemOption Text | HomeOption Text | Source Text deriving (Show)

data ProfileOptions = ListProfiles (Maybe Bool) | NewProfile (Maybe Text) deriving (Show)

parser :: Parser Command
parser
     =   fmap NewPackage
         (subcommand "new" "Create new components of packages"
           (argPath "package" "Identify in which package shall components create"))
     <|> fmap Rebuild
         (subcommand "rebuild" "Rebuild the system using the current profile" rebuildParser)
     <|> fmap GarbageCollect
         (subcommand "gc" "Execute nix-store garbage collections"
           (optional (switch "system" 's' "Root level garbage collections")))
     <|> fmap Check
         (subcommand "check" "Check the dotfiles flake"
           (optional (switch "" ' ' "")))
     <|> fmap Search
         (subcommand "search" "Search up related packages in nixpkgs" searchParser)
     <|> fmap Init
         (subcommand "init" "Initialise your dotfiles system!"
           (optional (switch "" ' ' "")))
     <|> fmap Hop
         (subcommand "hop" "Switch into another profile system quickly"
           (optional (argText "profile" "The designated profile name (Optional)")))
     <|> fmap Profile
         (subcommand "profile" "Configure the profile and generation settings" profileParser)
     <|> fmap Repl
         (subcommand "repl" "Run nix repl with reloaded configs and packages" replParser)

searchParser :: Parser SearchSource
searchParser
            =   fmap Package
                (subcommand "pkg" "Search upon nixpkgs packages"
                 (argText "pname" "The desired package name"))
            <|> fmap SystemOption
                (subcommand "osopt" "Search upon nixpkgs provided options"
                 (argText "pname" "The desired package name"))
            <|> fmap HomeOption
                (subcommand "hmopt" "Search upon home-manager provided options"
                 (argText "pname" "The desired package name"))
            <|> fmap Source
                (subcommand "src" "Search upon the local dotfiles src directory"
                 (argText "pname" "The desired package name"))
                
rebuildParser :: Parser (Maybe Bool, Maybe Bool)
rebuildParser = (,) <$> optional (switch "trace" 't' "Enable showing trace while building")
                    <*> optional (switch "update" 'u' "Update the flake before building")

replParser :: Parser (Maybe Bool, Maybe Bool)
replParser = (,) <$> optional (switch "flake" 'f' "Preload dotfiles flake inputs")
                 <*> optional (switch "nixpkgs" 'n' "Preload nixpkgs inputs")
profileParser :: Parser ProfileOptions
profileParser
             =   fmap ListProfiles
                 (subcommand "list" "List all existing profiles"
                  (optional (switch "" ' ' "")))
             <|> fmap NewProfile
                 (subcommand "new" "Create a new profile"
                  (optional (optText "user" 'u' "Create a profile with a given user name")))

rebuild :: (Maybe Bool, Maybe Bool) -> IO()
rebuild (trace, update) = do
  userName <- fetchEnv "CURRENT_USER"
  dotfiles <- fetchEnv "DOTFILES_TOP"
  cd dotfiles
  case update of
    Just _ -> stdout (inshell "nix flake update" empty)
    Nothing -> echo ""
  case trace of
    Just _  -> stdout (inshell ("sudo nixos-rebuild switch --flake 'path:./#" <> userName <> "' --show-trace") empty)
    Nothing -> stdout (inshell ("sudo nixos-rebuild switch --flake 'path:./#" <> userName <> "'") empty)

search :: SearchSource -> IO()
search n = do
  case n of
    Package pname -> stdout (inshell ("nix search nixpkgs " <> pname) empty)
    HomeOption pname -> stdout (inshell ("man -P cat home-configuration.nix | rg -i '" <> pname <> "'") empty)
    SystemOption pname -> stdout (inshell ("man -P cat configuration.nix | rg -i '" <> pname <> "'") empty)
    Source pname -> stdout (inshell ("cd $DOTFILES_SRC && find . -name '" <> pname <> "'") empty)
  

check :: IO()
check = do
  dotfiles <- fetchEnv "DOTFILES_TOP"
  cd dotfiles
  stdout (inshell ("nix flake check") empty)

repl :: (Maybe Bool, Maybe Bool) -> IO()
repl (flake, nixpkgs) = do
  dotfiles <- fetchEnv "DOTFILES_TOP"
  case flake of
    Just _ -> stdout (inshell ("nix repl --expr 'builtins.getFlake \"" <> dotfiles <> "\"'") empty)
    Nothing -> do
      case nixpkgs of
        Just _ -> stdout (inshell ("nix repl '<nixpkgs>'") empty)
        Nothing -> stdout (inshell ("nix repl") empty)

garbageCollect :: Maybe Bool -> IO()
garbageCollect n = do
  stdout (inshell "nix-env --delete-generations old" empty)
  case n of
    Just _  -> stdout (inshell "nix-store --gc" empty)
    Nothing -> stdout (inshell "sudo nix-store --gc" empty)

init :: IO()
init = do
  echo "Welcome to NixOS! You are now going to initialise your modualised dotfiles to build your system."
  echo "Please make sure you are now in the top-level of dotfiles directory, usually the git cloned directory for now. Enter Y to proceed. (Y/N)"
  proceed <- promptInput
  when proceed $ do
    echo "Setting temporary environmental variables..."
    top <- pwd
    setEnv "DOTFILES_TOP" (encodeString top)
    setEnv "DOTFILES_BIN" (encodeString top ++ "/bin")
    setEnv "DOTFILES_ASSETS" (encodeString top ++ "/assets")
    setEnv "DOTFILES_MODULES" (encodeString top ++ "/modules")
    setEnv "DOTFILES_SECRETS" (encodeString top ++ "/secrets")
    setEnv "DOTFILES_SRC" (encodeString top ++ "/src")
    echo "Now enter your desired user name of the system"
    name <- readText
    newProfile name
  
  

hop :: Maybe Text -> IO()
hop n = do
  echo ""

profile :: ProfileOptions -> IO()
profile n = do
  case n of
    NewProfile m ->
      case m of
        Just name -> newProfile name
        Nothing -> do
          currentUser <- fetchEnv "CURRENT_USER"
          echo "Would you like to initialise a new profile of the same user as the current one? (Y/N)"
          proceed <- promptInput
          case proceed of
            True -> newProfile currentUser
            False -> do
              echo "Enter your new desired user name if you'd like to proceed"
              newName <- readText
              newProfile newName       
        
    ListProfiles m -> echo ""

newProfile :: Text -> IO()
newProfile n = do
  echo ""
  
newPackage :: FilePath -> IO()
newPackage pkg = do
  src <- fetchEnv "DOTFILES_SRC"
  cd src
  exists <- testdir pkg
  if exists
    then do
      echo "The package already exists in the source, would you like to proceed adding more components? (Y/N)"
      proceed <- promptInput
      when proceed $ do
        cd pkg
        addComponents pkg Nothing
    else do
      echo "The package does not exist in the source, would you like to proceed creating a new package? (Y/N)"
      proceed <- promptInput
      when proceed $ do
        mkdir pkg
        cd pkg
        addComponents pkg (Just "basic")

addComponents :: FilePath -> Maybe Text -> IO()
addComponents pkg comp = do
  case comp of
    Just name -> do
      touch (fromText (name <> ".nix"))
      output (fromText (name <> ".nix")) (fileTemplate (format fp pkg) name)
    Nothing -> do
      echo "Enter the desired component name you want to add"
      input <- readText
      output (fromText (input <> ".nix")) (fileTemplate (format fp pkg) input)

promptInput :: IO Bool
promptInput = do
  input <- readline
  case input of
    Just "Y" -> return True
    Just "N" -> return False
    _ -> do
      echo "Invalid input"
      promptInput

readText :: MonadIO io => io (Text)
readText = do
  input <- readline
  case input of
    Just x -> return $ lineToText x
    Nothing -> readText

fetchEnv :: (IsString a) => String -> IO (a)
fetchEnv n = do
  input <- lookupEnv n
  case input of
    Just env -> return $ fromString env
    Nothing -> do
      echo "Some dotfile related environmental variables are not set, run 'yo init' first."
      exit (ExitFailure 1)

configTemplate :: Text -> Text -> Text
configTemplate pkg comp =
  case comp of
    "basic" -> "home.packages = [ pkgs." <> pkg <> " ];"
    _ -> "Unspecified"
  
fileTemplate :: Text -> Text -> Shell Line
fileTemplate pkg comp = select . map unsafeTextToLine $
                        [ "{ config, pkgs, lib, ... }:"
                        , ""
                        , "lib.mine.mkIfProfile config.modules \"" <> pkg <> "\" \"basic\""
                        , ""
                        , "{"
                        , "  " <> (configTemplate pkg comp)
                        , "}"]

main :: IO()
main = do
  x <- options "Sezryo's NixOS CLI" parser
  case x of
    Rebuild (n, m) -> rebuild (n, m)
    Search n -> search n
    NewPackage n -> newPackage n  
    GarbageCollect n -> garbageCollect n
    Check n -> check
    Init n -> Main.init
    Hop n -> hop n
    Profile n -> profile n
    Repl (n, m) -> repl (n, m)
