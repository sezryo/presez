#! /usr/bin/env cached-nix-shell
#! nix-shell -i runghc -p "haskellPackages.ghcWithPackages (p: [p.turtle])"

{-# LANGUAGE OverloadedStrings #-}

import Turtle
import System.Environment
import Prelude hiding (FilePath)

data Command = NewPackage FilePath | Rebuild (Maybe Bool, Maybe Bool) | GarbageCollect (Maybe Bool) deriving (Show)

parser :: Parser Command
parser
     =   fmap NewPackage
         (subcommand "new" "Create new components of packages"
           (argPath "package" "Identify in which package shall components create"))
     <|> fmap Rebuild
         (subcommand "rebuild" "Rebuild the system using the current profile" rebuildParser)
     <|> fmap GarbageCollect
         (subcommand "gc" "Execute nix-store garbage collections"
           (optional (switch "system" 's' "Root level garbage collections")))

rebuildParser :: Parser (Maybe Bool, Maybe Bool)
rebuildParser = (,) <$> optional (switch "trace" 't' "Enable showing trace while building")
                    <*> optional (switch "update" 'u' "Update the flake before building")
                
rebuild :: (Maybe Bool, Maybe Bool) -> IO()
rebuild (trace, update)= do
  userName <- getEnv "CURRENT_USER"
  dotfiles <- getEnv "DOTFILES_TOP"
  cd (fromString dotfiles)
  case update of
    Just _ -> stdout (inshell "nix flake update" empty)
    Nothing -> echo ""
  case trace of
    Just _  -> stdout (inshell ("sudo nixos-rebuild switch --flake 'path:./#" <> fromString userName <> "' --show-trace") empty)
    Nothing -> stdout (inshell ("sudo nixos-rebuild switch --flake 'path:./#" <> fromString userName <> "'") empty)

garbageCollect :: Maybe Bool -> IO()
garbageCollect n = do
  stdout (inshell "nix-env --delete-generations old" empty)
  case n of
    Just _  -> stdout (inshell "nix-store --gc" empty)
    Nothing -> stdout (inshell "sudo nix-store --gc" empty)

newPackage :: FilePath -> IO()
newPackage pkg = do
  src <- getEnv "DOTFILES_SRC"
  cd (fromString src)
  exists <- testdir pkg
  if exists
    then do
      echo "The package already exists in the source, would you like to proceed adding more components? (Y/N)"
      proceed <- promptInput
      when proceed $ do
        cd pkg
        addComponents pkg Nothing
    else do
      echo "The package does not exist in the source, would you like to proceed creating a new package? (Y/N)"
      proceed <- promptInput
      when proceed $ do
        mkdir pkg
        cd pkg
        addComponents pkg (Just "basic")

addComponents :: FilePath -> Maybe Text -> IO()
addComponents pkg comp = do
  case comp of
    Just name -> do
      touch (fromText (name <> ".nix"))
      output (fromText (name <> ".nix")) (fileTemplate (format fp pkg) name)
    Nothing ->
      echo "Nothing"

promptInput :: IO Bool
promptInput = do
  input <- readline
  case input of
    Just "Y" -> return True
    Just "N" -> return False
    _ -> do
      echo "Invalid input"
      promptInput
      
fileTemplate :: Text -> Text -> Shell Line
fileTemplate pkg comp = select . map unsafeTextToLine $
                        [ "{ config, pkgs, lib, ... }:"
                        , ""
                        , "lib.mine.mkIfProfile config.modules \"" <> pkg <> "\" \"basic\""
                        , ""
                        , "{"
                        , "  home.packages = [ pkgs." <> pkg <> " ];"
                        , "}"]

main :: IO()
main = do
  x <- options "My NixOS CLI" parser
  case x of
    Rebuild (n, m) -> rebuild (n, m)  
    NewPackage n -> newPackage n  
    GarbageCollect n -> garbageCollect n
